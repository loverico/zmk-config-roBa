#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt Q ESC         &kp W         &kp E       &kp R                   &kp T                                                            &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D       &kp F                   &kp G        &kp LS(LG(S))               &lt_to_layer_0 3 MINUS  &kp H        &kp J  &kp K      &kp L    &kp TAB
&mt LEFT_SHIFT Z  &kp X         &kp C       &kp V                   &kp B        &kp COLON                   &kp SEMICOLON           &kp N        &kp M  &kp COMMA  &kp DOT  &kp MINUS
&mt LCTRL ESC     &kp LEFT_ALT  &kp LSHIFT  &mt LEFT_COMMAND LANG1  &lt 1 SPACE  &lt_to_layer_0 2 LANG2      &kp BACKSPACE           &lt 1 ENTER                             &tog 1
            >;

            sensor-bindings = <&inc_dec_kp K_SCROLL_UP K_SCROLL_DOWN>;
        };

        arrow {
            bindings = <
&kp LCTRL  &kp N7  &kp N8   &kp N9  &kp LS(N9)                                            &kp RS(N0)    &mkp MB3  &mkp MB2        &kp EQUAL  &kp BACKSPACE
&kp LALT   &kp N4  &kp N5   &kp N6  &kp LBKT    &trans                      &kp RG(X)     &kp RBKT      &mkp MB1  &kp UP_ARROW    &kp MINUS  &kp SEMI
&kp LSHFT  &kp N1  &kp N2   &kp N3  &kp BSLH    &lt_to_layer_0 3 LG(V)      &kp RG(C)     &kp FSLH      &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp RSHFT
&kp LGUI   &kp N0  &kp DOT  &trans  &trans      &trans                      &kp RS(RALT)  &kp RS(RGUI)                                       &to 0
            >;
        };

        symbol {
            bindings = <
&kp F7     &kp N7  &kp N8   &kp N9  &kp PLUS                                              &kp APOS           &kp EQUAL         &kp QUESTION     &kp GRAVE      &kp GRAVE
&kp F10    &kp N4  &kp N5   &kp N6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp CARET  &kp DOUBLE_QUOTES  &kp MINUS         &kp EXCLAMATION  &kp PERCENT    &kp SEMI
&kp LSHFT  &kp N1  &kp N2   &kp N3  &kp PERIOD    &lt 3 EQUAL                  &trans     &kp HASH           &kp LS(ASTERISK)  &kp AT_SIGN      &kp AMPERSAND  &kp LS(SEMI)
&kp ESC    &kp N0  &kp DOT  &trans  &trans        &trans                       &trans     &trans                                                               &lt 6 CARET
            >;
        };

        Function {
            bindings = <
&kp F1     &kp F2                  &kp F3          &kp F4                   &kp F5                         &kp F6           &kp F7  &kp F8  &kp F9  &kp F10
&kp LG(A)  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp RG(F)  &trans      &trans  &kp RIGHT_SHIFT  &trans  &trans  &trans  &kp F11
&kp RG(Z)  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &kp LG(V)  &trans      &trans  &trans           &trans  &trans  &trans  &kp F12
&trans     &trans                  &trans          &trans                   &trans     &trans      &trans  &trans                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mkp MB2  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans             &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &kp RIGHT_COMMAND  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                     &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
